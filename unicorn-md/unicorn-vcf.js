import { exec } from 'child_process';
import fs from 'fs';
import path from 'path';

let handler = async (m, { conn }) => {
  const groupMetadata = await conn.groupMetadata(m.chat);
  const participants = groupMetadata.participants || [];

  // Validation
  if (participants.length < 2) return m.reply('ðŸš« *Group must have at least 2 members.*');
  if (participants.length > 1000) return m.reply('ðŸš« *Group has over 1000 members. VCF generation aborted.*');

  // Build VCF content
  let vcfContent = '';
  for (let participant of participants) {
    const userJid = participant.id;
    const userName = userJid.split('@')[0];
    const displayName = participant.notify || `+${userName}`;

    vcfContent += `
BEGIN:VCARD
VERSION:3.0
FN:${displayName}
TEL;TYPE=CELL:+${userName}
NOTE:Generated by Unicorn MD for ${groupMetadata.subject}
END:VCARD
`.trim() + '\n';
  }

  // Prepare VCF file
  const groupName = groupMetadata.subject || 'Unicorn_Group';
  const sanitizedGroupName = groupName.replace(/[^a-zA-Z0-9]/g, '_');
  const vcfFilePath = path.join(process.cwd(), `${sanitizedGroupName}.vcf`);

  fs.writeFileSync(vcfFilePath, vcfContent);

  // Send VCF file
  await conn.sendMessage(m.chat, {
    document: { url: vcfFilePath },
    mimetype: 'text/vcard',
    fileName: `${sanitizedGroupName}.vcf`,
    caption: `ðŸ“‡ *Unicorn MD Contact Export*\n\nðŸ”¹ Group: *${groupName}*\nðŸ‘¥ Members: *${participants.length}*\n\nðŸ“¤ Exported as VCF file.`,
  });

  // Clean up file
  fs.unlinkSync(vcfFilePath);
};

handler.help = ['vcf'];
handler.tags = ['tools'];
handler.command = /^vcf$/i;
handler.group = true;

export default handler;
